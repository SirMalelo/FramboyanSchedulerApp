@page "/owner/student-management"
@using Client.Models
@using Client.Services
@using System.Net.Http.Json
@inject AuthenticatedHttpClient Http
@inject IJSRuntime JS

<h3>Student Management</h3>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(statusMessage.Contains("successfully") ? "alert-success" : "alert-danger") alert-dismissible fade show">
        @statusMessage
        <button type="button" class="btn-close" @onclick="() => statusMessage = string.Empty"></button>
    </div>
}

@* Add Student Section *@
<div class="card mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0"><i class="bi bi-person-plus"></i> Add New Student</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Full Name *</label>
                <input @bind="newStudent.FullName" class="form-control" placeholder="Enter student's full name" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Email *</label>
                <input @bind="newStudent.Email" type="email" class="form-control" placeholder="student@email.com" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Password (Optional)</label>
                <input @bind="newStudent.Password" type="password" class="form-control" placeholder="Leave blank for auto-generated" />
                <small class="text-muted">If empty, a temporary password will be generated</small>
            </div>
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" @onclick="AddStudent" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="bi bi-person-plus"></i> Add Student
            </button>
        </div>
    </div>
</div>

@* Students List *@
<div class="card">
    <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0"><i class="bi bi-people"></i> Current Students (@students.Count)</h5>
        <button class="btn btn-outline-light btn-sm" @onclick="LoadStudents">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>
    <div class="card-body">
        @if (students.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Registration Type</th>
                            <th>Email Confirmed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in students)
                        {
                            <tr>
                                <td>
                                    @if (editingStudentId == student.Id)
                                    {
                                        <input @bind="editStudent.FullName" class="form-control form-control-sm" />
                                    }
                                    else
                                    {
                                        <strong>@student.FullName</strong>
                                    }
                                </td>
                                <td>
                                    @if (editingStudentId == student.Id)
                                    {
                                        <input @bind="editStudent.Email" type="email" class="form-control form-control-sm" />
                                    }
                                    else
                                    {
                                        @student.Email
                                    }
                                </td>
                                <td>
                                    <span class="badge @(student.CreatedBy == "Owner" ? "bg-info" : "bg-success")">
                                        @student.CreatedBy
                                    </span>
                                </td>
                                <td>
                                    @if (student.EmailConfirmed)
                                    {
                                        <span class="badge bg-success">Confirmed</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">Pending</span>
                                    }
                                </td>
                                <td>
                                    @if (editingStudentId == student.Id)
                                    {
                                        <button class="btn btn-success btn-sm me-1" @onclick="SaveStudent">
                                            <i class="bi bi-check"></i> Save
                                        </button>
                                        <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">
                                            <i class="bi bi-x"></i> Cancel
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-primary btn-sm me-1" @onclick="() => StartEdit(student)">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button class="btn btn-outline-warning btn-sm me-1" @onclick="() => ResetPassword(student.Id)">
                                            <i class="bi bi-key"></i> Reset Password
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteStudent(student)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center text-muted py-4">
                <i class="bi bi-person-x display-1"></i>
                <p class="mt-2">No students found. Add your first student above!</p>
            </div>
        }
    </div>
</div>

@* Password Display Modal *@
@if (showPasswordModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">
                        <i class="bi bi-key"></i> Temporary Password Generated
                    </h5>
                </div>
                <div class="modal-body text-center">
                    <p><strong>Student:</strong> @tempPasswordStudent</p>
                    <p class="mb-3">Please provide this temporary password to the student:</p>
                    <div class="alert alert-warning">
                        <h4 class="alert-heading">Temporary Password:</h4>
                        <code style="font-size: 1.2em;">@tempPassword</code>
                    </div>
                    <p class="small text-muted">The student should change this password after their first login.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="CopyPassword">
                        <i class="bi bi-clipboard"></i> Copy Password
                    </button>
                    <button class="btn btn-secondary" @onclick="ClosePasswordModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<StudentModel> students = new();
    private AddStudentModel newStudent = new();
    private UpdateStudentModel editStudent = new();
    private string editingStudentId = string.Empty;
    private string statusMessage = string.Empty;
    private bool isLoading = false;
    private bool showPasswordModal = false;
    private string tempPassword = string.Empty;
    private string tempPasswordStudent = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        try
        {
            students = await Http.GetFromJsonAsync<List<StudentModel>>("api/admin/students") ?? new();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading students: {ex.Message}";
        }
    }

    private async Task AddStudent()
    {
        if (string.IsNullOrWhiteSpace(newStudent.FullName) || string.IsNullOrWhiteSpace(newStudent.Email))
        {
            statusMessage = "Please provide both full name and email.";
            return;
        }

        isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/admin/add-student", newStudent);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AddStudentResponse>();
                statusMessage = result?.Message ?? "Student added successfully!";
                
                // Show temporary password if generated
                if (!string.IsNullOrEmpty(result?.Student?.TemporaryPassword))
                {
                    tempPassword = result.Student.TemporaryPassword;
                    tempPasswordStudent = result.Student.FullName ?? result.Student.Email;
                    showPasswordModal = true;
                }

                // Reset form and reload
                newStudent = new();
                await LoadStudents();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                statusMessage = $"Failed to add student: {error}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void StartEdit(StudentModel student)
    {
        editingStudentId = student.Id;
        editStudent.FullName = student.FullName;
        editStudent.Email = student.Email;
    }

    private async Task SaveStudent()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/admin/update-student/{editingStudentId}", editStudent);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Student updated successfully!";
                editingStudentId = string.Empty;
                await LoadStudents();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                statusMessage = $"Failed to update student: {error}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        editingStudentId = string.Empty;
        editStudent = new();
    }

    private async Task ResetPassword(string studentId)
    {
        try
        {
            var response = await Http.PostAsync($"api/admin/reset-student-password/{studentId}", null);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<PasswordResetResponse>();
                tempPassword = result?.TemporaryPassword ?? "";
                tempPasswordStudent = students.FirstOrDefault(s => s.Id == studentId)?.FullName ?? "Student";
                showPasswordModal = true;
                statusMessage = "Password reset successfully!";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                statusMessage = $"Failed to reset password: {error}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    private async Task DeleteStudent(StudentModel student)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {student.FullName}? This action cannot be undone.");
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"api/admin/delete-student/{student.Id}");
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Student {student.FullName} deleted successfully.";
                await LoadStudents();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                statusMessage = $"Failed to delete student: {error}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    private async Task CopyPassword()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", tempPassword);
        statusMessage = "Password copied to clipboard!";
        ClosePasswordModal();
    }

    private void ClosePasswordModal()
    {
        showPasswordModal = false;
        tempPassword = string.Empty;
        tempPasswordStudent = string.Empty;
    }

    public class StudentModel
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public bool EmailConfirmed { get; set; }
        public string CreatedBy { get; set; } = string.Empty;
        public bool LockoutEnabled { get; set; }
    }

    public class AddStudentModel
    {
        public string Email { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public string? Password { get; set; }
    }

    public class UpdateStudentModel
    {
        public string? FullName { get; set; }
        public string? Email { get; set; }
    }

    public class AddStudentResponse
    {
        public string Message { get; set; } = string.Empty;
        public StudentInfo? Student { get; set; }

        public class StudentInfo
        {
            public string Id { get; set; } = string.Empty;
            public string Email { get; set; } = string.Empty;
            public string FullName { get; set; } = string.Empty;
            public string? TemporaryPassword { get; set; }
        }
    }

    public class PasswordResetResponse
    {
        public string Message { get; set; } = string.Empty;
        public string TemporaryPassword { get; set; } = string.Empty;
    }
}
