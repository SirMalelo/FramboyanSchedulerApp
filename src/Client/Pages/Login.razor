

@* Blazor form components *@
@using Microsoft.AspNetCore.Components.Forms
@* JS interop for localStorage access *@
@inject IJSRuntime JS
@* Navigation for redirects *@
@inject NavigationManager Navigation
@* HttpClient for API calls *@
@inject HttpClient Http
@page "/login"



@* Login page for user authentication *@
<h3>Login</h3>


@* Show error or success message *@
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}


@* Login form using Blazor's EditForm and validation components *@
<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Email</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Password</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>
    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>


@code {
    // Model for login form data
    private LoginModel loginModel = new();

    // Holds error and success messages
    private string? errorMessage;
    private string? successMessage;

    // Handles login form submission
    private async Task HandleLogin()
    {
        errorMessage = null;
        successMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (!string.IsNullOrEmpty(result?.Token))
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    // Only set profileFullName to email if not already set (so we don't overwrite real name)
                    var existingName = await JS.InvokeAsync<string>("localStorage.getItem", "profileFullName");
                    if (string.IsNullOrWhiteSpace(existingName))
                    {
                        await JS.InvokeVoidAsync("localStorage.setItem", "profileFullName", loginModel.Email);
                    }
                    successMessage = "Login successful!";
                    var profileComplete = await JS.InvokeAsync<string>("localStorage.getItem", "profileComplete");
                    if (string.IsNullOrEmpty(profileComplete))
                    {
                        Navigation.NavigateTo("/complete-profile");
                    }
                    else
                    {
                        Navigation.NavigateTo("/");
                    }
                }
                else
                {
                    errorMessage = "Login failed: No token returned.";
                }
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // Model for login form
    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    // Model for login API response
    public class LoginResult
    {
        public string Token { get; set; } = string.Empty;
    }
}
