@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@page "/complete-profile"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Complete Your Profile</h3>

<EditForm Model="profileModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Full Name</label>
        <InputText class="form-control" @bind-Value="profileModel.FullName" />
    </div>
    <div class="mb-3">
        <label>Date of Birth</label>
        <InputDate class="form-control" @bind-Value="profileModel.DateOfBirth" />
    </div>
    <button class="btn btn-primary" type="submit">Save</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

@code {
    private ProfileModel profileModel = new();
    private string? Message;

    private async Task HandleSubmit()
    {
        // Send full name to backend
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            Message = "You are not logged in. Please log in again.";
            await Task.Delay(1500);
            Navigation.NavigateTo("/login");
            return;
        }
        var request = new HttpRequestMessage(HttpMethod.Post, "api/auth/update-profile")
        {
            Content = JsonContent.Create(new { FullName = profileModel.FullName })
        };
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            // Wait for backend to commit, then fetch updated user info
            await Task.Delay(200); // Small delay to ensure DB commit
            var meRequest = new HttpRequestMessage(HttpMethod.Get, "api/auth/me");
            meRequest.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var meResponse = await Http.SendAsync(meRequest);
            if (meResponse.IsSuccessStatusCode)
            {
                var json = await meResponse.Content.ReadAsStringAsync();
                var doc = System.Text.Json.JsonDocument.Parse(json);
                string? fullName = null;
                if (doc.RootElement.TryGetProperty("fullName", out var fullNameProp))
                    fullName = fullNameProp.GetString();
                if (!string.IsNullOrWhiteSpace(fullName))
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "profileFullName", fullName);
                }
            }
            await JS.InvokeVoidAsync("localStorage.setItem", "profileDateOfBirth", profileModel.DateOfBirth.ToString("yyyy-MM-dd"));
            await JS.InvokeVoidAsync("localStorage.setItem", "profileComplete", "true");
            Message = "Profile saved! Redirecting...";
            await Task.Delay(1000); // Ensure backend commit before reload
            // Force a full browser reload to guarantee NavMenu updates
            await JS.InvokeVoidAsync("eval", "window.location.href = '/' ");
        }
        else
        {
            Message = "Failed to update profile. Please try again.";
        }
    }

    public class ProfileModel
    {
        [Required]
        public string FullName { get; set; } = string.Empty;
        [Required]
        public DateTime DateOfBirth { get; set; } = DateTime.Today;
    }
}
