@page "/owner/stripe-settings"
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Owner,Admin")]

<h3>Stripe Payment Settings</h3>

<div class="container mt-4">
    @if (settings == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h4>Stripe Configuration</h4>
                    </div>
                    <div class="card-body">
                        <EditForm Model="settings" OnValidSubmit="SaveSettings">
                            <DataAnnotationsValidator />
                            
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Environment</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="environment" id="testMode" 
                                               @onchange="() => settings.IsLiveMode = false" checked="@(!settings.IsLiveMode)">
                                        <label class="form-check-label" for="testMode">
                                            Test Mode (Recommended for setup)
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="environment" id="liveMode" 
                                               @onchange="() => settings.IsLiveMode = true" checked="@settings.IsLiveMode">
                                        <label class="form-check-label" for="liveMode">
                                            Live Mode
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <InputCheckbox @bind-Value="settings.IsEnabled" class="form-check-input" id="enablePayments" />
                                        <label class="form-check-label" for="enablePayments">
                                            Enable Payment Processing
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Publishable Key</label>
                                <InputText @bind-Value="settings.PublishableKey" class="form-control" 
                                          placeholder="pk_test_... or pk_live_..." />
                                <small class="form-text text-muted">
                                    Get this from your Stripe dashboard → Developers → API keys
                                </small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Secret Key</label>
                                <InputText @bind-Value="settings.SecretKey" class="form-control" type="password"
                                          placeholder="sk_test_... or sk_live_..." />
                                <small class="form-text text-muted">
                                    Keep this secure! Never share your secret key.
                                </small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Webhook Secret</label>
                                <InputText @bind-Value="settings.WebhookSecret" class="form-control" type="password"
                                          placeholder="whsec_..." />
                                <small class="form-text text-muted">
                                    Create a webhook endpoint in Stripe for: @webhookUrl
                                </small>
                            </div>

                            <hr>

                            <h5>Processing Fees</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Stripe Fee Percentage</label>
                                        <div class="input-group">
                                            <InputNumber @bind-Value="settings.ProcessingFeePercentage" class="form-control" step="0.1" />
                                            <span class="input-group-text">%</span>
                                        </div>
                                        <small class="form-text text-muted">Default: 2.9%</small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Stripe Fixed Fee</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber @bind-Value="settings.ProcessingFeeFixed" class="form-control" step="0.01" />
                                        </div>
                                        <small class="form-text text-muted">Default: $0.30</small>
                                    </div>
                                </div>
                            </div>

                            <h6>Your Additional Fees (Optional)</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Additional Fee Percentage</label>
                                        <div class="input-group">
                                            <InputNumber @bind-Value="settings.AdditionalFeePercentage" class="form-control" step="0.1" />
                                            <span class="input-group-text">%</span>
                                        </div>
                                        <small class="form-text text-muted">Extra fee to cover your costs</small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Additional Fixed Fee</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber @bind-Value="settings.AdditionalFeeFixed" class="form-control" step="0.01" />
                                        </div>
                                        <small class="form-text text-muted">Extra fixed fee per transaction</small>
                                    </div>
                                </div>
                            </div>

                            <hr>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Business Name</label>
                                        <InputText @bind-Value="settings.BusinessName" class="form-control" />
                                        <small class="form-text text-muted">Appears on receipts</small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Statement Descriptor</label>
                                        <InputText @bind-Value="settings.StatementDescriptor" class="form-control" maxlength="22" />
                                        <small class="form-text text-muted">Appears on customer's card statement (22 chars max)</small>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Success URL</label>
                                        <InputText @bind-Value="settings.SuccessUrl" class="form-control" 
                                                  placeholder="https://yourgym.com/payment-success" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Cancel URL</label>
                                        <InputText @bind-Value="settings.CancelUrl" class="form-control" 
                                                  placeholder="https://yourgym.com/payment-cancelled" />
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Save Settings
                                </button>
                                <button type="button" class="btn btn-outline-secondary" @onclick="TestConnection" disabled="@isTesting">
                                    @if (isTesting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Test Connection
                                </button>
                            </div>

                            <ValidationSummary class="text-danger mt-3" />
                        </EditForm>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Setup Guide</h5>
                    </div>
                    <div class="card-body">
                        <ol>
                            <li><strong>Create Stripe Account</strong>
                                <br><a href="https://stripe.com" target="_blank" class="btn btn-sm btn-outline-primary mt-1">Sign up at Stripe.com</a>
                            </li>
                            <li><strong>Get API Keys</strong>
                                <br><small>Dashboard → Developers → API keys</small>
                            </li>
                            <li><strong>Setup Webhook</strong>
                                <br><small>Dashboard → Developers → Webhooks</small>
                                <br><code style="font-size: 0.8em;">@webhookUrl</code>
                            </li>
                            <li><strong>Test Setup</strong>
                                <br><small>Use test mode first, then switch to live</small>
                            </li>
                        </ol>

                        @if (totalFeeExample > 0)
                        {
                            <div class="mt-3 p-2 bg-light rounded">
                                <h6>Fee Example ($50 transaction):</h6>
                                <small>
                                    Stripe: $@stripeFeeExample.ToString("F2")<br>
                                    Your fee: $@additionalFeeExample.ToString("F2")<br>
                                    <strong>Total fees: $@totalFeeExample.ToString("F2")</strong><br>
                                    You receive: $@(50 - totalFeeExample).ToString("F2")
                                </small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</div>

@code {
    private StripeSettingsModel? settings;
    private bool isSaving = false;
    private bool isTesting = false;
    private string successMessage = "";
    private string errorMessage = "";
    private string webhookUrl = "";
    
    private decimal stripeFeeExample = 0;
    private decimal additionalFeeExample = 0;
    private decimal totalFeeExample = 0;

    protected override async Task OnInitializedAsync()
    {
        webhookUrl = $"{Navigation.BaseUri}api/payment/webhook";
        await LoadSettings();
        CalculateExampleFees();
    }

    private async Task LoadSettings()
    {
        try
        {
            settings = await Http.GetFromJsonAsync<StripeSettingsModel>("api/payment/stripe-settings");
            if (settings == null)
            {
                settings = new StripeSettingsModel();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading Stripe settings.";
            settings = new StripeSettingsModel();
        }
    }

    private async Task SaveSettings()
    {
        if (settings == null) return;

        isSaving = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var response = await Http.PutAsJsonAsync("api/payment/stripe-settings", settings);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Stripe settings saved successfully!";
                CalculateExampleFees();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error saving settings: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while saving settings.";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task TestConnection()
    {
        isTesting = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            // This would test the Stripe connection
            // For now, just simulate a test
            await Task.Delay(1000);
            successMessage = "Stripe connection test successful!";
        }
        catch (Exception ex)
        {
            errorMessage = "Stripe connection test failed.";
        }
        finally
        {
            isTesting = false;
        }
    }

    private void CalculateExampleFees()
    {
        if (settings == null) return;

        const decimal exampleAmount = 50m;
        stripeFeeExample = (exampleAmount * settings.ProcessingFeePercentage / 100) + settings.ProcessingFeeFixed;
        additionalFeeExample = (exampleAmount * settings.AdditionalFeePercentage / 100) + settings.AdditionalFeeFixed;
        totalFeeExample = stripeFeeExample + additionalFeeExample;
    }

    public class StripeSettingsModel
    {
        public int Id { get; set; }
        public string PublishableKey { get; set; } = "";
        public string SecretKey { get; set; } = "";
        public string WebhookSecret { get; set; } = "";
        public decimal ProcessingFeePercentage { get; set; } = 2.9m;
        public decimal ProcessingFeeFixed { get; set; } = 0.30m;
        public decimal AdditionalFeePercentage { get; set; } = 0m;
        public decimal AdditionalFeeFixed { get; set; } = 0m;
        public bool IsLiveMode { get; set; } = false;
        public bool IsEnabled { get; set; } = true;
        public string? BusinessName { get; set; }
        public string? StatementDescriptor { get; set; }
        public string? SuccessUrl { get; set; }
        public string? CancelUrl { get; set; }
    }
}
