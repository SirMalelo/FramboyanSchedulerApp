@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Client.Shared
@inject HttpClient Http
<div class="sidebar">
    <div class="sidebar-brand p-3">
        @if (!string.IsNullOrEmpty(userName))
        {
            <span class="fw-bold text-white" style="font-size:1.2rem;">@userName</span>
        }

    </div>
    <nav class="nav flex-column nav-scrollable" @onclick="ToggleNavMenu">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="register">
                <span class="bi bi-person-plus-fill-nav-menu" aria-hidden="true"></span> Create Login
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="bi bi-box-arrow-in-right-nav-menu" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="profile">
                <span class="bi bi-person-circle-nav-menu" aria-hidden="true"></span> Profile
            </NavLink>
        </div>
        <AuthorizeRoleView Role="Owner">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/site-customization">
                    <span class="bi bi-palette"></span> Site Customization
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/membership-types">
                    <span class="bi bi-card-list"></span> Membership Types
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/payment-methods">
                    <span class="bi bi-credit-card"></span> Payment Methods
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/assign-membership">
                    <span class="bi bi-person-check"></span> Assign Membership
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/class-management">
                    <span class="bi bi-calendar-event"></span> Manage Classes
                </NavLink>
            </div>
        </AuthorizeRoleView>
        
        <!-- Classes available to all authenticated users -->
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="classes/calendar">
                <span class="bi bi-calendar3"></span> Class Calendar
            </NavLink>
        </div>
        
        <AuthorizeRoleView Role="Student">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="student/memberships">
                    <span class="bi bi-people"></span> My Memberships
                </NavLink>
            </div>
        </AuthorizeRoleView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? userName;
    private string? debugMeJson;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [Inject]
    private IJSRuntime JS { get; set; } = default!;


    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    private IDisposable? locationChangedHandler;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserName();
        locationChangedHandler = Navigation.RegisterLocationChangingHandler(OnLocationChanged);
    }

    private async ValueTask OnLocationChanged(LocationChangingContext context)
    {
        await LoadUserName();
        StateHasChanged();
    }

    private async Task LoadUserName()
    {
        // Try to get auth token
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            userName = null;
            await JS.InvokeVoidAsync("localStorage.removeItem", "profileFullName");
            return;
        }

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "api/auth/me");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var client = Http ?? new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };
            var response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                debugMeJson = json; // DEBUG: show in UI
                var doc = System.Text.Json.JsonDocument.Parse(json);
                if (doc.RootElement.TryGetProperty("fullName", out var fullNameProp) && !string.IsNullOrWhiteSpace(fullNameProp.GetString()))
                {
                    userName = fullNameProp.GetString();
                    await JS.InvokeVoidAsync("localStorage.setItem", "profileFullName", userName ?? "");
                }
                else
                {
                    userName = null;
                    await JS.InvokeVoidAsync("localStorage.removeItem", "profileFullName");
                }
            }
            else
            {
                debugMeJson = $"ERROR: Status {response.StatusCode}";
                userName = null;
                await JS.InvokeVoidAsync("localStorage.removeItem", "profileFullName");
            }
        }
        catch (Exception ex)
        {
            debugMeJson = $"EXCEPTION: {ex.Message}";
            userName = null;
            await JS.InvokeVoidAsync("localStorage.removeItem", "profileFullName");
        }
    }

    public void Dispose()
    {
        locationChangedHandler?.Dispose();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
