@using Microsoft.AspNetCore.Components.Routing
@inject AuthenticatedHttpClient HttpClient
@inject IJSRuntime JS
@inject NavigationManager Navigation
<div class="sidebar">
    <div class="sidebar-brand p-3">
        @if (!string.IsNullOrEmpty(studioName))
        {
            <div class="fw-bold text-white" style="font-size:1.1rem;">@studioName</div>
        }
        @if (!string.IsNullOrEmpty(userName))
        {
            <small class="text-white-50">@userName</small>
        }
    </div>
    <nav class="nav flex-column nav-scrollable" @onclick="ToggleNavMenu">
        @if (customization.ShowHomeTab)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @customization.HomeLabel
                </NavLink>
            </div>
        }
        @if (customization.ShowRegisterTab)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="register">
                    <span class="bi bi-person-plus-fill-nav-menu" aria-hidden="true"></span> @customization.RegisterLabel
                </NavLink>
            </div>
        }
        @if (customization.ShowLoginTab)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-box-arrow-in-right-nav-menu" aria-hidden="true"></span> @customization.LoginLabel
                </NavLink>
            </div>
        }
        @if (customization.ShowProfileTab)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="profile">
                    <span class="bi bi-person-circle-nav-menu" aria-hidden="true"></span> @customization.ProfileLabel
                </NavLink>
            </div>
        }
        <AuthorizeRoleView Role="Owner">
            <!-- Always show Site Customization for owners -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/site-customization">
                    <span class="bi bi-palette"></span> @(!string.IsNullOrEmpty(customization.SiteCustomizationLabel) ? customization.SiteCustomizationLabel : "Site Customization")
                </NavLink>
            </div>
            
            @if (customization.ShowMembershipTypesTab)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="owner/membership-types">
                        <span class="bi bi-card-list"></span> @(!string.IsNullOrEmpty(customization.MembershipTypesLabel) ? customization.MembershipTypesLabel : "Membership Types")
                    </NavLink>
                </div>
            }
            @if (customization.ShowPaymentMethodsTab)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="owner/payment-methods">
                        <span class="bi bi-credit-card"></span> @(!string.IsNullOrEmpty(customization.PaymentMethodsLabel) ? customization.PaymentMethodsLabel : "Payment Methods")
                    </NavLink>
                </div>
            }
            
            <!-- Stripe Settings for Owners -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/stripe-settings">
                    <span class="bi bi-credit-card-2-front"></span> Stripe Payment Setup
                </NavLink>
            </div>
            @if (customization.ShowAssignMembershipTab)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="owner/assign-membership">
                        <span class="bi bi-person-check"></span> @(!string.IsNullOrEmpty(customization.AssignMembershipLabel) ? customization.AssignMembershipLabel : "Assign Membership")
                    </NavLink>
                </div>
            }
            
            <!-- Membership Management for Owners -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/memberships">
                    <span class="bi bi-card-checklist"></span> Membership Management
                </NavLink>
            </div>
            @if (customization.ShowManageClassesTab)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="owner/class-management">
                        <span class="bi bi-calendar-event"></span> @(!string.IsNullOrEmpty(customization.ManageClassesLabel) ? customization.ManageClassesLabel : "Manage Classes")
                    </NavLink>
                </div>
            }
            
            <!-- Student Management for Owners -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="owner/student-management">
                    <span class="bi bi-people"></span> Student Management
                </NavLink>
            </div>
            
            <!-- Kiosk Check-In for Owners -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="kiosk-checkin">
                    <span class="bi bi-person-check-fill"></span> Kiosk Check-In
                </NavLink>
            </div>
        </AuthorizeRoleView>
        
        <!-- Classes available to all authenticated users -->
        @if (customization.ShowClassesTab)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="classes/calendar">
                    <span class="bi bi-calendar3"></span> @customization.ClassesLabel
                </NavLink>
            </div>
        }
        
        <AuthorizeRoleView Role="Student">
            @if (customization.ShowMembershipsTab)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="student/memberships">
                        <span class="bi bi-people"></span> @customization.MembershipsLabel
                    </NavLink>
                </div>
            }
            
            <!-- Purchase Memberships for Students -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="student/purchase-membership">
                    <span class="bi bi-cart-plus"></span> Purchase Membership
                </NavLink>
            </div>
        </AuthorizeRoleView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? userName;
    private string? debugMeJson;
    private string studioName = "Framboyan Studio";
    private SiteCustomization customization = new();

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private IDisposable? locationChangedHandler;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserName();
        await LoadStudioName();
        locationChangedHandler = Navigation.RegisterLocationChangingHandler(OnLocationChanged);
    }

    private async ValueTask OnLocationChanged(LocationChangingContext context)
    {
        await LoadUserName();
        await LoadStudioName();
        StateHasChanged();
    }

    private async Task LoadStudioName()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<SiteCustomization>("api/SiteCustomization");
            if (response != null)
            {
                customization = response;
                studioName = !string.IsNullOrEmpty(response.StudioName) ? response.StudioName : "Framboyan Studio";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading studio customization: {ex.Message}");
        }
    }

    private async Task LoadUserName()
    {
        // Try to get auth token
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            userName = null;
            await JS.InvokeVoidAsync("localStorage.removeItem", "profileFullName");
            return;
        }

        try
        {
            var response = await HttpClient.GetFromJsonAsync<System.Text.Json.JsonElement>("api/auth/me");
            if (response.ValueKind != System.Text.Json.JsonValueKind.Undefined)
            {
                debugMeJson = response.GetRawText(); // DEBUG: show in UI
                if (response.TryGetProperty("fullName", out var fullNameProp) && !string.IsNullOrWhiteSpace(fullNameProp.GetString()))
                {
                    userName = fullNameProp.GetString();
                    await JS.InvokeVoidAsync("localStorage.setItem", "profileFullName", userName ?? "");
                }
                else
                {
                    userName = null;
                    await JS.InvokeVoidAsync("localStorage.removeItem", "profileFullName");
                }
            }
            else
            {
                debugMeJson = "ERROR: No response data";
                userName = null;
                await JS.InvokeVoidAsync("localStorage.removeItem", "profileFullName");
            }
        }
        catch (Exception ex)
        {
            debugMeJson = $"EXCEPTION: {ex.Message}";
            userName = null;
            await JS.InvokeVoidAsync("localStorage.removeItem", "profileFullName");
        }
    }

    public void Dispose()
    {
        locationChangedHandler?.Dispose();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
