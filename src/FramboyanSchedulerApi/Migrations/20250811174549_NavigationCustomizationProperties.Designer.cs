// <auto-generated />
using System;
using FramboyanSchedulerApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FramboyanSchedulerApi.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250811174549_NavigationCustomizationProperties")]
    partial class NavigationCustomizationProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("FramboyanSchedulerApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CheckedInAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCheckedIn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.ClassModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstructorName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BalanceDue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.MembershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClassCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MembershipTypes");
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.SiteCustomization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddButtonLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnimationSpeed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignMembershipLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignMembershipPageTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookClassButtonLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ButtonBorderRadius")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CancelButtonLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardBackgroundColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardBorderColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardBorderRadius")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardShadow")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckInButtonLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassManagementPageTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassesLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomCSS")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeleteButtonLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EditButtonLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableAnimations")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableParticles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FacebookUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FaviconUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FooterBackgroundColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FooterText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FooterTextColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GradientDirection")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GradientEnd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GradientStart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadingColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InputBackgroundColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InputBorderColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InputFocusColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InputTextColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InstagramUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkHoverColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ManageClassesLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MembershipTypesLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MembershipTypesPageTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MembershipsLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileBreakpoint")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MobileOptimized")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NavigationStyle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodsLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodsPageTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryButtonColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryButtonHoverColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryButtonTextColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryFont")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegisterLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SaveButtonLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryButtonColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryButtonHoverColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryButtonTextColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryFont")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowAssignMembershipTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowClassesTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowHomeTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowLoginTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowManageClassesTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowMembershipTypesTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowMembershipsTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowPaymentMethodsTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowProfileTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowRegisterTab")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSiteCustomizationTab")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SidebarActiveColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SidebarBackgroundColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SidebarHoverColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SidebarTextColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteCustomizationLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentMembershipsPageTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudioName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudioWebsiteUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableBorderColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableHeaderColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableRowHoverColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ThemePreset")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TwitterUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WelcomeText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YouTubeUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SiteCustomizations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.Attendance", b =>
                {
                    b.HasOne("FramboyanSchedulerApi.Models.ClassModel", "Class")
                        .WithMany("Attendances")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FramboyanSchedulerApi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.Membership", b =>
                {
                    b.HasOne("FramboyanSchedulerApi.Models.MembershipType", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FramboyanSchedulerApi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MembershipType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FramboyanSchedulerApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FramboyanSchedulerApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FramboyanSchedulerApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FramboyanSchedulerApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FramboyanSchedulerApi.Models.ClassModel", b =>
                {
                    b.Navigation("Attendances");
                });
#pragma warning restore 612, 618
        }
    }
}
